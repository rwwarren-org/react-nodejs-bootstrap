(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/ryan/Documents/react-nodejs-bootstrap/gulp/../src/inc/appRouter.js":[function(require,module,exports){
"use strict";
'use strict';
var Container = require('./Container');
var Home = require('./Home');
var DefaultRoute = ReactRouter.DefaultRoute;
var HistoryLocation = ReactRouter.HistoryLocation;
var NotFoundRoute = ReactRouter.NotFoundRoute;
var Route = ReactRouter.Route;
var routes = (React.createElement(Route, {
  path: "/",
  handler: Container
}, React.createElement(DefaultRoute, {
  name: "home",
  handler: Home
}), React.createElement(Route, {
  path: "admin/",
  name: "admin",
  handler: Home
})));
ReactRouter.run(routes, HistoryLocation, function(Handler) {
  React.render(React.createElement(Handler, null), document.body);
});


//# sourceURL=/Users/ryan/Documents/react-nodejs-bootstrap/src/inc/appRouter.js
},{"./Container":"/Users/ryan/Documents/react-nodejs-bootstrap/src/inc/Container.js","./Home":"/Users/ryan/Documents/react-nodejs-bootstrap/src/inc/Home.js"}],"/Users/ryan/Documents/react-nodejs-bootstrap/src/inc/Common.js":[function(require,module,exports){
"use strict";
'use strict';
var makesid = function() {
  var text = "";
  var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  for (var i = 0; i < 103; i++) {
    text += possible.charAt(Math.floor(Math.random() * possible.length));
  }
  return text;
};
var Common = {'makeid': makesid};
module.exports = Common;


//# sourceURL=/Users/ryan/Documents/react-nodejs-bootstrap/src/inc/Common.js
},{}],"/Users/ryan/Documents/react-nodejs-bootstrap/src/inc/Container.js":[function(require,module,exports){
"use strict";
'use strict';
var Router = ReactRouter;
var $__0 = Router,
    Route = $__0.Route,
    RouteHandler = $__0.RouteHandler,
    Link = $__0.Link;
var Navigation = ReactRouter.Navigation;
var Logo = require('./Logo');
var Home = require('./Home');
var Footer = require('./Footer');
var Nav = require('./Nav');
var common = require('./Common');
var Container = React.createClass({
  displayName: "Container",
  mixins: [Navigation],
  componentDidMount: function() {
    if ($.cookie("sid") == null) {
      $.cookie("sid", common.makeid());
    }
  },
  getInitialState: function() {
    return {isLoggedIn: false};
  },
  render: function() {
    return (React.createElement("div", {className: "container"}, React.createElement(Logo, null), React.createElement(Nav, null), React.createElement(Home, null), React.createElement(Footer, null)));
  }
});
module.exports = Container;


//# sourceURL=/Users/ryan/Documents/react-nodejs-bootstrap/src/inc/Container.js
},{"./Common":"/Users/ryan/Documents/react-nodejs-bootstrap/src/inc/Common.js","./Footer":"/Users/ryan/Documents/react-nodejs-bootstrap/src/inc/Footer.js","./Home":"/Users/ryan/Documents/react-nodejs-bootstrap/src/inc/Home.js","./Logo":"/Users/ryan/Documents/react-nodejs-bootstrap/src/inc/Logo.js","./Nav":"/Users/ryan/Documents/react-nodejs-bootstrap/src/inc/Nav.js"}],"/Users/ryan/Documents/react-nodejs-bootstrap/src/inc/Footer.js":[function(require,module,exports){
"use strict";
'use strict';
var Footer = React.createClass({
  displayName: "Footer",
  render: function() {
    var now = new Date;
    var theYear = now.getYear();
    if (theYear < 1900) {
      theYear = theYear + 1900;
    }
    return (React.createElement("div", {className: "footer"}, '\u00A9', " ", theYear, " Test"));
  }
});
module.exports = Footer;


//# sourceURL=/Users/ryan/Documents/react-nodejs-bootstrap/src/inc/Footer.js
},{}],"/Users/ryan/Documents/react-nodejs-bootstrap/src/inc/Home.js":[function(require,module,exports){
"use strict";
'use strict';
var Home = React.createClass({
  displayName: "Home",
  render: function() {
    return (React.createElement("div", null, "Welcome to the home page!"));
  }
});
module.exports = Home;


//# sourceURL=/Users/ryan/Documents/react-nodejs-bootstrap/src/inc/Home.js
},{}],"/Users/ryan/Documents/react-nodejs-bootstrap/src/inc/Logo.js":[function(require,module,exports){
"use strict";
'use strict';
var Logo = React.createClass({
  displayName: "Logo",
  render: function() {
    return (React.createElement("div", {className: "logo"}));
  }
});
module.exports = Logo;


//# sourceURL=/Users/ryan/Documents/react-nodejs-bootstrap/src/inc/Logo.js
},{}],"/Users/ryan/Documents/react-nodejs-bootstrap/src/inc/Nav.js":[function(require,module,exports){
"use strict";
'use strict';
var Navigation = ReactRouter.Navigation;
var common = require('./Common');
var Nav = React.createClass({
  displayName: "Nav",
  mixins: [Navigation],
  render: function() {
    var $__0 = this;
    return (React.createElement("div", {className: "nav"}, React.createElement("ul", null, React.createElement("li", null, React.createElement("a", {
      href: "javascript:void(0);",
      onClick: (function() {
        return $__0.transitionTo('home');
      })
    }, "Home")), React.createElement("li", null, React.createElement("a", {
      href: "javascript:void(0);",
      onClick: (function() {
        return $__0.transitionTo('home');
      })
    }, "Test")), React.createElement("li", null, React.createElement("a", {
      href: "javascript:void(0);",
      onClick: (function() {
        return $__0.transitionTo('home');
      })
    }, "Test")))));
  }
});
module.exports = Nav;


//# sourceURL=/Users/ryan/Documents/react-nodejs-bootstrap/src/inc/Nav.js
},{"./Common":"/Users/ryan/Documents/react-nodejs-bootstrap/src/inc/Common.js"}]},{},["/Users/ryan/Documents/react-nodejs-bootstrap/gulp/../src/inc/appRouter.js"])
//# sourceMappingURL=data:application/json;base64,
